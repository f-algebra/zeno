type nat = 0 | succ nat;
 
type list = nil | cons nat list;

let rec (add : nat -> nat -> nat) = 
  fun (x : nat) ->
  fun (y : nat) -> 
    case x of
      0 -> y
    | succ x' -> succ (add x' y);
    
prop add_0 (x : nat) = add x 0 = x;

eval add 0 0;
